"""
Cisco HyperFlex Edge Automated Deployment Tool (HX Auto Deploy), v2.1
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The Cisco HyperFlex Edge Automated Deployment Tool (HX Auto Deploy)
         enables automated deployment of Cisco HyperFlex Edge clusters through
         the Cisco Intersight API.
GitHub Repository: https://github.com/ugo-emekauwa/hx-auto-deploy
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "J:\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings for deploying your HyperFlex
cluster. Remove the sample values and replace them with your own, where
applicable.

To identify the servers to be used for the HyperFlex cluster, the desired
cluster size and cluster server node attributes are needed to select the
correct servers registered under your Intersight account.
Under the "HyperFlex Edge Automated Deployment Tool Specific Settings"
configuration section below, for the hx_cluster_size variable, enter the
desired cluster size. For the hx_node_attribute_list variable, provide within
the list either the CIMC/KVM IP address or the serial number of the registered
servers in the desired cluster order. Within the Intersight GUI, in the
'ADMIN/Devices' section of the navigation pane, the CIMC/KVM IP address is
under the column 'Device IP', and the serial number is under the
column 'Device ID'. The amount of entries in the
hx_node_attribute_list variable list must match the provided cluster size
number for the hx_cluster_size variable.  

Here are a few examples:

hx_cluster_size = 2
hx_node_attribute_list = ("198.18.135.116", "198.18.135.117")

or

hx_cluster_size = 3
hx_node_attribute_list = ("ABV1304000V", "EZL252770MU", "WIA344370GE")

or

hx_cluster_size = 4
hx_node_attribute_list = ("198.18.135.116", "EZL252770MU", "WIA344370GE", "198.18.135.119")

The remaining variables are requesting the same configuration settings as the
Intersight HyperFlex Cluster Profile Wizard GUI and are listed in the same order.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######


# HyperFlex Edge Automated Deployment Tool Specific Settings
# NOTE - For the hx_node_attribute_list variable value, provide a list of the CIMC/KVM IP address (Device IP) or the serial number (Device ID) of the registered servers.
hx_cluster_size = 3
hx_node_attribute_list = ["198.18.135.116", "198.18.135.117", "198.18.135.118"]

# HyperFlex Cluster Profile Settings (Under the General step in the GUI Wizard)
hx_cluster_profile_name = "dcloud-hx-edge-cluster-1"
hx_software_version = "4.5(1a)"
hx_cluster_profile_description = f"A HyperFlex Cluster Profile for {hx_cluster_profile_name} generated by the HX Auto Deploy Tool."
hx_policy_name_prefix = hx_cluster_profile_name
hx_organization = "default"
hx_tags = {"Org": "IT", "Dept": "DevOps"}   # Empty the hx_tags dictionary if no tags are desired, for example: hx_tags = {}

# HyperFlex Local Credential Policy Settings (Security section under the Cluster Configuration step in the GUI Wizard)
default_factory_esxi_hypervisor_password_set = True
esxi_hypervisor_admin_username = "root"
esxi_hypervisor_admin_password = "C1sco12345!"
storage_controller_vm_root_user_password = "C1sco12345!"

# HyperFlex System Configuration Policy Settings (DNS, NTP and Timezone section under the Cluster Configuration step in the GUI Wizard)
# NOTE - For the timezone variable value, a full list of supported values can be found on the Intersight GUI or the Olson tz database.'
# NOTE - For the dns_servers_list and ntp_servers_list variables, provided IP address entries should be in IPv4 format.
# NOTE - More than one IPv4 address entry can be added to each list by separating with commas. 
timezone = "Etc/GMT"
dns_suffix = "dcloud.cisco.com"
dns_servers_list = ["198.18.133.1"]
ntp_servers_list = ["198.18.128.1"]

# HyperFlex VMware vCenter Configuration Policy Settings (vCenter section under the Cluster Configuration step in the GUI Wizard)
vcenter_fqdn_or_ip = "198.18.133.30"
vcenter_admin_username = "administrator@vsphere.local"
vcenter_admin_password = "C1sco12345!"
vcenter_hosts_and_clusters_datacenter_name = "dCloud-DC"

# HyperFlex Cluster Storage Configuration Policy Settings (Storage Configuration section under the Cluster Configuration step in the GUI Wizard)
enable_vdi_optimization = False
cleanup_disk_partitions = True

# HyperFlex Node Configuration Policy Settings (IP & Hostname section under the Cluster Configuration step in the GUI Wizard)
# NOTE - Provided IP addresses should be in IPv4 format.
esxi_hostname_prefix = "hx-edge-esxi"
esxi_mgmt_ip_range_start_address = "198.18.135.101"
esxi_mgmt_ip_range_end_address = "198.18.135.103"
esxi_mgmt_ip_range_subnet_mask = "255.255.192.0"
esxi_mgmt_ip_range_gateway = "198.18.128.1"
storage_controller_vm_ip_range_start_address = "198.18.135.104"
storage_controller_vm_ip_range_end_address = "198.18.135.106"
storage_controller_vm_ip_range_subnet_mask = "255.255.192.0"
storage_controller_vm_ip_range_gateway = "198.18.128.1"

# HyperFlex Cluster Network Configuration Policy Settings (Network Configuration section under the Cluster Configuration step in the GUI Wizard)
# NOTE - Supported values for the hx_node_uplink_speed are "1G" or "10G". "10G" supports 10 Gbps and higher.
# NOTE - The physical connectivity of the HX server nodes must also meet the topology requirements for the specified uplink speed.
# NOTE - For the MAC address prefix start and end addresses, leave the default value of "00", unless modification is needed. If so, provide only two digits for the 4th octet.
# NOTE - The first three octets (six digits) or OUI of 00:25:B5 is hard-coded for the MAC prefix start and end addresses.
hx_node_uplink_speed = "1G"
hx_mac_prefix_start_address = "00"
hx_mac_prefix_end_address = "00"
hx_mgmt_vlan_id = 0
enable_hx_node_uplink_jumbo_frames = False

# HyperFlex Storage Network Setting (Under the Cluster Configuration step in the GUI Wizard)
hx_storage_vlan_id = 100

# HyperFlex Cluster Management IP Address and MAC Prefix Address Settings (Under the Nodes Configuration step in the GUI Wizard)
# NOTE - The provided IP address should be in IPv4 format.
# NOTE - For the MAC address prefix, leave the default value of "00", unless modification is needed. If so, provide only two digits for the 4th octet.
# NOTE - The first three octets (six digits) or OUI of 00:25:B5 is hard-coded for the MAC prefix address.
hx_connect_mgmt_ip_address = "198.18.135.100"
hx_mac_prefix_address = "00"


####### Finish Configuration Settings - The required value entries are complete. #######


# Import needed Python modules
import sys
import json
import ipaddress
import traceback
import requests
import intersight
from intersight.intersight_api_client import IntersightApiClient

# Starting the Automated HyperFlex Edge Install Deployment Tool
print("\nStarting the Cisco HyperFlex Edge Automated Deployment Tool (HX Auto Deploy).\n")

# Establish dictionary for the provided variable values
variable_dictionary = (
  {"Name": "key_id",
   "Value": key_id,
   "Configuration Section": "MODULE REQUIREMENT 1",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff" retrieved under API Keys in Settings of the targeted Intersight account.',
   "Max Length": None,
   "Required Character": "/",
   },
  {"Name": "key",
   "Value": key,
   "Configuration Section": "MODULE REQUIREMENT 2",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "J:\\SecretKey.txt", pointing to the file system location of the "SecretKey.txt" file that belongs to the API key of the targeted Intersight account.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_cluster_size",
   "Value": hx_cluster_size,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Edge Auto Deploy Tool Specific Settings",
   "Expected Type": int,
   "Supplemental Type": None,
   "Restricted Value": (2, 3, 4),
   "Example Value": 'an integer of 2, 3, or 4, which are the currently supported HyperFlex Edge cluster sizes.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_node_attribute_list",
   "Value": hx_node_attribute_list,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Edge Auto Deploy Tool Specific Settings",
   "Expected Type": list,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a list such as ("198.18.135.116", "198.18.135.117", "198.18.135.118").',
   "Max Length": hx_cluster_size,
   "Required Character": None,
   },
  {"Name": "hx_cluster_profile_name",
   "Value": hx_cluster_profile_name,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Profile Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "dcloud-hx-edge-cluster-1".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_software_version",
   "Value": hx_software_version,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Profile Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "4.0(2c)".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_cluster_profile_description",
   "Value": hx_cluster_profile_description,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Profile Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "A HyperFlex Cluster Profile for dcloud-hx-edge-cluster-1 generated by the HX Auto Deploy Tool.".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_policy_name_prefix",
   "Value": hx_policy_name_prefix,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Profile Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "hx_cluster_profile_name".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "default_factory_esxi_hypervisor_password_set",
   "Value": default_factory_esxi_hypervisor_password_set,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Local Credential Policy Settings",
   "Expected Type": bool,
   "Supplemental Type": None,
   "Restricted Value": (True, False),
   "Example Value": 'a Boolean of True or False.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "esxi_hypervisor_admin_username",
   "Value": esxi_hypervisor_admin_username,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Local Credential Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "root".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "esxi_hypervisor_admin_password",
   "Value": esxi_hypervisor_admin_password,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Local Credential Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "C1sco12345!".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "storage_controller_vm_root_user_password",
   "Value": storage_controller_vm_root_user_password,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Local Credential Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "C1sco12345!".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "timezone",
   "Value": timezone,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex System Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "Etc/GMT" or "America/New_York". A full list of supported values can be found on the Intersight GUI or the Olson tz database.',
   "Max Length": None,
   "Required Character": "/",
   },
  {"Name": "dns_suffix",
   "Value": dns_suffix,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex System Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "dcloud.cisco.com".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "dns_servers_list",
   "Value": dns_servers_list,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex System Configuration Policy Settings",
   "Expected Type": list,
   "Supplemental Type": "ip_list",
   "Restricted Value": None,
   "Example Value": 'a list such as ["198.18.133.1"].',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "ntp_servers_list",
   "Value": ntp_servers_list,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex System Configuration Policy Settings",
   "Expected Type": list,
   "Supplemental Type": "ip_list",
   "Restricted Value": None,
   "Example Value": 'a list such as ["198.18.128.1"].',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "vcenter_fqdn_or_ip",
   "Value": vcenter_fqdn_or_ip,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex VMware vCenter Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.133.30".',
   "Max Length": 15,
   "Required Character": None,
   },
  {"Name": "vcenter_admin_username",
   "Value": vcenter_admin_username,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex VMware vCenter Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "administrator@vsphere.local".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "vcenter_admin_password",
   "Value": vcenter_admin_password,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex VMware vCenter Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "C1sco12345!".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "vcenter_hosts_and_clusters_datacenter_name",
   "Value": vcenter_hosts_and_clusters_datacenter_name,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex VMware vCenter Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "dCloud-DC".',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "enable_vdi_optimization",
   "Value": enable_vdi_optimization,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Storage Configuration Policy Settings",
   "Expected Type": bool,
   "Supplemental Type": None,
   "Restricted Value": (True, False),
   "Example Value": 'a Boolean of True or False.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "cleanup_disk_partitions",
   "Value": cleanup_disk_partitions,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Storage Configuration Policy Settings",
   "Expected Type": bool,
   "Supplemental Type": None,
   "Restricted Value": (True, False),
   "Example Value": 'a Boolean of True or False.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "esxi_hostname_prefix",
   "Value": esxi_hostname_prefix,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "hx-edge-esxi". The string value can be no longer than 60 characters.',
   "Max Length": 60,
   "Required Character": None,
   },
  {"Name": "esxi_mgmt_ip_range_start_address",
   "Value": esxi_mgmt_ip_range_start_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.135.101".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "esxi_mgmt_ip_range_end_address",
   "Value": esxi_mgmt_ip_range_end_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.135.103".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "esxi_mgmt_ip_range_subnet_mask",
   "Value": esxi_mgmt_ip_range_subnet_mask,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "255.255.192.0".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "esxi_mgmt_ip_range_gateway",
   "Value": esxi_mgmt_ip_range_gateway,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.128.1".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "storage_controller_vm_ip_range_start_address",
   "Value": storage_controller_vm_ip_range_start_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.135.104".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "storage_controller_vm_ip_range_end_address",
   "Value": storage_controller_vm_ip_range_end_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.135.106".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "storage_controller_vm_ip_range_subnet_mask",
   "Value": storage_controller_vm_ip_range_subnet_mask,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "255.255.192.0".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "storage_controller_vm_ip_range_gateway",
   "Value": storage_controller_vm_ip_range_gateway,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Node Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.128.1".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "hx_node_uplink_speed",
   "Value": hx_node_uplink_speed,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Network Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": ("1G", "10G"),
   "Example Value": 'either the string "1G" or "10G" only. The option "10G" will also support and enable higher speeds.',
   "Max Length": 3,
   "Required Character": None,
   },
  {"Name": "hx_mac_prefix_start_address",
   "Value": hx_mac_prefix_start_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Network Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "00". This value is only used with 10G+ uplink speeds. The MAC Address OUI (Organizationally Unique Identifier) of 00:25:B5 is hard-coded.',
   "Max Length": 2,
   "Required Character": None,
   },
  {"Name": "hx_mac_prefix_end_address",
   "Value": hx_mac_prefix_end_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Network Configuration Policy Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "00". This value is only used with 10G+ uplink speeds. The MAC Address OUI (Organizationally Unique Identifier) of 00:25:B5 is hard-coded.',
   "Max Length": 2,
   "Required Character": None,
   },
  {"Name": "hx_mgmt_vlan_id",
   "Value": hx_mgmt_vlan_id,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Network Configuration Policy Settings",
   "Expected Type": int,
   "Supplemental Type": None,
   "Restricted Value": range(0,4096),
   "Example Value": 'an integer from 0 - 4095',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "enable_hx_node_uplink_jumbo_frames",
   "Value": enable_hx_node_uplink_jumbo_frames,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Network Configuration Policy Settings",
   "Expected Type": bool,
   "Supplemental Type": None,
   "Restricted Value": (True, False),
   "Example Value": 'a Boolean of True or False.',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_storage_vlan_id",
   "Value": hx_storage_vlan_id,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Storage Network Setting",
   "Expected Type": int,
   "Supplemental Type": None,
   "Restricted Value": range(1,4096),
   "Example Value": 'an integer from 1 - 4095',
   "Max Length": None,
   "Required Character": None,
   },
  {"Name": "hx_connect_mgmt_ip_address",
   "Value": hx_connect_mgmt_ip_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Management IP Address and MAC Prefix Address Settings",
   "Expected Type": str,
   "Supplemental Type": "ip_string",
   "Restricted Value": None,
   "Example Value": 'a string such as "198.18.135.100".',
   "Max Length": 15,
   "Required Character": ".",
   },
  {"Name": "hx_mac_prefix_address",
   "Value": hx_mac_prefix_address,
   "Configuration Section": "MODULE REQUIREMENT 3 --> HyperFlex Cluster Management IP Address and MAC Prefix Address Settings",
   "Expected Type": str,
   "Supplemental Type": None,
   "Restricted Value": None,
   "Example Value": 'a string such as "00". This value is only used with 10G+ uplink speeds. The MAC Address OUI (Organizationally Unique Identifier) of 00:25:B5 is hard-coded.',
   "Max Length": 2,
   "Required Character": None,
   },
  )

# Begin performing a preliminary check of the provided variable values
print("Performing a preliminary check of the provided variable values...\n")

for variable in variable_dictionary:
  # Verify the provided variable value matches the expected type (e.g. string, integer, list, Boolean, etc.)
  if type(variable["Value"]) != variable["Expected Type"]:
    print(f'The value provided for the {variable["Name"]} variable is not in '
          'the correct format.\n'
          f'Please provide a value in the {variable["Expected Type"]} format '
          'and restart the HX Auto Deploy Tool.\n'
          f'The {variable["Name"]} variable can be found under '
          f'{variable["Configuration Section"]}.\n'
          f'An example value would be {variable["Example Value"]}\n')
    sys.exit(0)

  # Verify the provided variable value contains any required characters
  if variable["Required Character"]:      
    if variable["Required Character"] not in variable["Value"]:
      print(f'The value provided for the {variable["Name"]} variable is '
            f'missing the required character "{variable["Required Character"]}" '
            'in the value.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

  # Verify the provided variable values for single IP address strings are valid IP addresses
  if variable["Supplemental Type"] == "ip_string":
    try:
      ipaddress.ip_address(variable["Value"])
    except Exception:
      print(f'The value provided for the {variable["Name"]} variable is a not '
            'a correctly formatted IPv4 address.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

  # Verify the provided variable values for lists of IP address strings contain valid IP addresses
  if variable["Supplemental Type"] == "ip_list":
    try:
      for variable_ip in variable["Value"]:
        ipaddress.ip_address(variable_ip)
    except Exception:
      print(f'The value provided for the {variable["Name"]} variable contains '
            'an entry that is not a correctly formatted IPv4 address.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

  # Verify the provided variable value matches any restricted values    
  if variable["Restricted Value"]:      
    if variable["Value"] not in variable["Restricted Value"]:
      print(f'The value provided for the {variable["Name"]} variable is not an '
            'accepted value.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

  # Verify the provided variable value does not exceed any set maximum length
  if variable["Max Length"]:      
    if len(variable["Value"]) > variable["Max Length"]:
      print(f'The value provided for the {variable["Name"]} variable exceeds the '
            'maximum accepted length.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

  # Verify the provided variable value for lists are not empty
  if variable["Expected Type"] == list:
    if not variable["Value"]:
      print(f'The value provided for the {variable["Name"]} variable is an '
            'empty list.\n'
            'Please update the value and restart the HX Auto Deploy Tool.\n'
            f'The {variable["Name"]} variable can be found under '
            f'{variable["Configuration Section"]}.\n'
            f'An example value would be {variable["Example Value"]}\n')
      sys.exit(0)

# Verify the provided HyperFlex node attribute list can support the provided HyperFlex cluster size
if len(hx_node_attribute_list) < hx_cluster_size:
  print("The provided HyperFlex node attribute list has a total of "
        f"{len(hx_node_attribute_list)} entries. This is less than the provided "
        f"HyperFlex cluster size of {hx_cluster_size}. Please increase the "
        "provided HyperFlex node attributes then restart "
        "the HX Auto Deploy Tool.\n")
  sys.exit(0)


# Establish function to create IP address range lists
def create_ip_list(starting_ip_address,ending_ip_address):
  """This is a function to create a list range of IP addresses based on the
  provided starting IP address and ending IP address.
  """
  format_starting_ip_address = ipaddress.ip_address(starting_ip_address)
  format_ending_ip_address = ipaddress.ip_address(ending_ip_address)
  ip_range_staging_list = list(range(int(format_starting_ip_address), int(format_ending_ip_address + 1)))
  ip_range_production_list = []
  for ip in ip_range_staging_list:
    converted_ip = ipaddress.ip_address(ip)
    ip_range_production_list.append(converted_ip.compressed)
  return ip_range_production_list


# Verify the VMware ESXi hypervisor management starting and ending IP addresses do not conflict
if esxi_mgmt_ip_range_start_address == esxi_mgmt_ip_range_end_address:
  print("For the VMware ESXi hypervisor management IP range, the provided "
        f"ending IP address of {esxi_mgmt_ip_range_end_address} is the same as "
        "the provided starting IP address of "
        f"{esxi_mgmt_ip_range_start_address}. Please provide a different ending "
        "IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Verify the VMware ESXi hypervisor management starting IP address and subnet mask can be configured on an IP interface
try:
  esxi_mgmt_ip_range_start_address_ip_interface = ipaddress.ip_interface(f"{esxi_mgmt_ip_range_start_address}/{esxi_mgmt_ip_range_subnet_mask}")
except Exception as exception_message:
  print("There was an issue with testing the IP interface configuration for "
        "the provided VMware ESXi hypervisor management starting IP address of "
        f"{esxi_mgmt_ip_range_start_address} and the associated subnet mask of "
        f"{esxi_mgmt_ip_range_subnet_mask}.\n"
        "Please review the error message below, repair the provided IP address "
        "settings, then re-run the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Determine VMware ESXi hypervisor management IP network from provided starting IP address and subnet mask
esxi_mgmt_ip_range_start_address_network = esxi_mgmt_ip_range_start_address_ip_interface.network

# Verify the VMware ESXi hypervisor management ending IP address is in the same network as the starting IP address
if ipaddress.ip_address(esxi_mgmt_ip_range_end_address) not in esxi_mgmt_ip_range_start_address_network:
  print("For the VMware ESXi hypervisor management IP range, the provided "
        f"ending IP address of {esxi_mgmt_ip_range_end_address} is not in the "
        "same subnet as the provided starting IP address of "
        f"{esxi_mgmt_ip_range_start_address}. Please provide a different ending "
        "IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the VMware ESXi hypervisor management gateway IP address is in the same network as the starting IP address
if ipaddress.ip_address(esxi_mgmt_ip_range_gateway) not in esxi_mgmt_ip_range_start_address_network:
  print("For the VMware ESXi hypervisor management IP range, the provided "
        f"gateway IP address of {esxi_mgmt_ip_range_gateway} is not in the "
        "same subnet as the provided starting IP address of "
        f"{esxi_mgmt_ip_range_start_address}. Please provide a different "
        "gateway IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Create the VMware ESXi hypervisor management IP address range list
esxi_mgmt_ip_range_list = create_ip_list(esxi_mgmt_ip_range_start_address, esxi_mgmt_ip_range_end_address)

# Verify the created VMware ESXi hypervisor management IP address range list can support the provided HyperFlex cluster size
if len(esxi_mgmt_ip_range_list) < hx_cluster_size:
  print("The VMware ESXi hypervisor management IP address range has a total "
        f"of {len(esxi_mgmt_ip_range_list)} usable addresses. This is less than "
        f"the provided HyperFlex cluster size of {hx_cluster_size}. Please "
        "increase the size of the VMware ESXi hypervisor management IP address "
        "range then restart the HX Auto Deploy Tool. The provided value for "
        "the starting or ending IP and subnet mask may need to be adjusted.\n"
        f"Current starting IP address: {esxi_mgmt_ip_range_start_address}\n"
        f"Current ending IP address: {esxi_mgmt_ip_range_end_address}\n"
        f"Current subnet mask: {esxi_mgmt_ip_range_subnet_mask}\n")
  sys.exit(0)

# Verify the created VMware ESXi hypervisor management IP address range list does not conflict with any entries in the HX node attribute list
for esxi_mgmt_ip in esxi_mgmt_ip_range_list:
  if esxi_mgmt_ip in hx_node_attribute_list:
    print(f"The ESXi hypervisor management IP address of {esxi_mgmt_ip} "
          "created from the IP address range "
          f"{esxi_mgmt_ip_range_start_address} - {esxi_mgmt_ip_range_end_address}, "
          "conflicts with an IP address entry in the HX node attribute list "
          "variable named hx_node_attribute_list.\n"
          "The hx_node_attribute_list variable contains the following entries: \n"
          f"{hx_node_attribute_list}\n"
          "Please resolve the IP address conflict and restart "
          "the HX Auto Deploy Tool.\n")
    sys.exit(0)

# Verify the HXDP storage controller VM management starting IP address does not conflict with any entries in the VMware ESXi hypervisor management IP address range list
if storage_controller_vm_ip_range_start_address in esxi_mgmt_ip_range_list:
  print("For the HXDP storage controller VM management IP range, the provided "
        f"starting IP address of {storage_controller_vm_ip_range_start_address} "
        "is in the same range of IP addresses allocated for the VMware ESXi "
        "hypervisor management interfaces. Please provide a different starting "
        "IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HXDP storage controller VM management ending IP address does not conflict with any entries in the VMware ESXi hypervisor management IP address range list
if storage_controller_vm_ip_range_end_address in esxi_mgmt_ip_range_list:
  print("For the HXDP storage controller VM management IP range, the provided "
        f"ending IP address of {storage_controller_vm_ip_range_end_address} is "
        "in the same range of IP addresses allocated for the VMware ESXi "
        "hypervisor management interfaces. Please provide a different ending "
        "IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HXDP storage controller VM management starting and ending IP addresses do not conflict
if storage_controller_vm_ip_range_start_address == storage_controller_vm_ip_range_end_address:
  print("For the HXDP storage controller VM management IP range, the provided "
        f"ending IP address of {storage_controller_vm_ip_range_end_address} is "
        "the same as the provided starting IP address of "
        f"{storage_controller_vm_ip_range_start_address}. Please provide a "
        "different ending IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Verify the HXDP storage controller VM management starting IP address and subnet mask can be configured on an IP interface
try:
  storage_controller_vm_ip_range_start_address_ip_interface = ipaddress.ip_interface(f"{storage_controller_vm_ip_range_start_address}/{storage_controller_vm_ip_range_subnet_mask}")
except Exception as exception_message:
  print("There was an issue with testing the IP interface configuration for "
        "the provided HXDP storage controller VM management starting IP "
        f"address of {storage_controller_vm_ip_range_start_address} "
        "and the associated subnet mask of "
        f"{storage_controller_vm_ip_range_subnet_mask}.\n"
        "Please review the error message below, repair the provided IP address "
        "settings, then re-run the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Determine HXDP storage controller VM management IP network from provided starting IP address and subnet mask
storage_controller_vm_ip_range_start_address_network = storage_controller_vm_ip_range_start_address_ip_interface.network

# Verify the HXDP storage controller VM management ending IP address is in the same network as the starting IP address
if ipaddress.ip_address(storage_controller_vm_ip_range_end_address) not in storage_controller_vm_ip_range_start_address_network:
  print("For the HXDP storage controller VM management IP range, the provided "
        f"ending IP address of {storage_controller_vm_ip_range_end_address} is "
        "not in the same subnet of the provided starting IP address of "
        f"{storage_controller_vm_ip_range_start_address}. Please provide a "
        "different ending IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HXDP storage controller VM management gateway IP address is in the same network as the starting IP address
if ipaddress.ip_address(storage_controller_vm_ip_range_gateway) not in storage_controller_vm_ip_range_start_address_network:
  print("For the HXDP storage controller VM management IP range, the provided "
        f"gateway IP address of {storage_controller_vm_ip_range_gateway} is "
        "not in the same subnet of the provided starting IP address of "
        f"{storage_controller_vm_ip_range_start_address}. Please provide a "
        "different gateway IP address and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Create the HXDP storage controller VM IP address range list
storage_controller_vm_ip_range_list = create_ip_list(storage_controller_vm_ip_range_start_address, storage_controller_vm_ip_range_end_address)

# Verify the created HXDP storage controller VM IP address range list can support the provided HyperFlex cluster size
if len(storage_controller_vm_ip_range_list) < hx_cluster_size:
  print("The HXDP storage controller VM IP address range has a total of "
        f"{len(storage_controller_vm_ip_range_list)} usable addresses. This is "
        f"less than the provided HyperFlex cluster size of {hx_cluster_size}. "
        "Please increase the size of the HXDP storage controller VM IP address "
        "range then restart the HX Auto Deploy Tool. The provided value for "
        "the starting or ending IP and subnet mask may need to be adjusted.\n"
        f"Current starting IP address: {storage_controller_vm_ip_range_start_address}\n"
        f"Current ending IP address: {storage_controller_vm_ip_range_end_address}\n"
        f"Current subnet mask: {storage_controller_vm_ip_range_subnet_mask}\n")
  sys.exit(0)

# Verify the created HXDP storage controller VM IP address range list does not conflict with any entries in the HX node attribute list
for storage_controller_vm_ip in storage_controller_vm_ip_range_list:
  if storage_controller_vm_ip in hx_node_attribute_list:
    print(f"The HXDP storage controller VM IP address of {storage_controller_vm_ip} "
          "created from the IP address range of "
          f"{storage_controller_vm_ip_range_start_address} - "
          f"{storage_controller_vm_ip_range_end_address}, conflicts with an "
          "IP address entry in the HX node attribute list variable named "
          "hx_node_attribute_list.\n"
          "The hx_node_attribute_list variable contains the following entries: \n"
          f"{hx_node_attribute_list}\n"
          "Please resolve the IP address conflict and restart "
          "the HX Auto Deploy Tool.\n")
    sys.exit(0)

# Verify the HXDP cluster management (HX Connect) IP address does not conflict with any entries in the VMware ESXi hypervisor management IP address range list
if hx_connect_mgmt_ip_address in esxi_mgmt_ip_range_list:
  print("The provided HyperFlex cluster management IP address of "
        f"{hx_connect_mgmt_ip_address} is in the same range of IP addresses "
        "allocated for the VMware ESXi hypervisor management interfaces. "
        "Please provide a different HyperFlex cluster management IP address "
        "and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HXDP cluster management (HX Connect) IP address does not conflict with any entries in the HXDP storage controller VM management IP address range list
if hx_connect_mgmt_ip_address in storage_controller_vm_ip_range_list:
  print("The provided HyperFlex cluster management IP address of "
        f"{hx_connect_mgmt_ip_address} is in the same range of IP addresses "
        "allocated for the HXDP storage controller VM management interfaces. "
        "Please provide a different HyperFlex cluster management IP address "
        "and restart the HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HXDP cluster management (HX Connect) IP address is in the same network as the HXDP storage controller VM IP addresses
if ipaddress.ip_address(hx_connect_mgmt_ip_address) not in storage_controller_vm_ip_range_start_address_network:
  print("The provided HyperFlex cluster management IP address of "
        f"{hx_connect_mgmt_ip_address} is not in the same subnet of "
        f"{storage_controller_vm_ip_range_start_address_network} as the "
        "provided starting IP address of "
        f"{storage_controller_vm_ip_range_start_address} and the provided "
        f"ending IP address of {storage_controller_vm_ip_range_end_address} for "
        "the HXDP storage controller VM management interfaces. Please provide "
        "a different HyperFlex cluster management IP address and restart the "
        "HX Auto Deploy Tool.\n")
  sys.exit(0) 

# Verify the HyperFlex cluster management IP address does not conflict with any entries in the HX node attribute list
if hx_connect_mgmt_ip_address in hx_node_attribute_list:
  print("The HyperFlex cluster management IP address of "
        f"{hx_connect_mgmt_ip_address} conflicts with an IP address entry in "
        "the HX node attribute list variable named hx_node_attribute_list.\n"
        "The hx_node_attribute_list variable contains the following entries: \n"
        f"{hx_node_attribute_list}\n"
        "Please resolve the IP address conflict and restart "
        "the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Completion of the preliminary check of the provided variable values
print("The preliminary check of the provided variable values is complete.\n")

# Set the HyperFlex Management Deployment Type
hx_mgmt_platform_type = "EDGE"

# Set the HyperFlex MAC prefix starting and ending addresses based on the provided uplink speed
if hx_node_uplink_speed == "1G":
  hx_mac_prefix_start_address_post_uplink_speed_checked = ""
  hx_mac_prefix_end_address_post_uplink_speed_checked = ""
else:
  hx_mac_prefix_start_address_post_uplink_speed_checked = f"00:25:B5:{hx_mac_prefix_start_address}"
  hx_mac_prefix_end_address_post_uplink_speed_checked = f"00:25:B5:{hx_mac_prefix_end_address}"

# Set the HyperFlex MAC prefix address based on the provided uplink speed setting
if hx_node_uplink_speed == "1G":
  hx_mac_prefix_address_post_uplink_speed_checked = ""
else:
  hx_mac_prefix_address_post_uplink_speed_checked = f"00:25:B5:{hx_mac_prefix_address}"

# Define Intersight SDK IntersightApiClient variables
# Tested on Cisco Intersight API Reference v1.0.9-2110
base_url = "https://intersight.com/api/v1"
api_instance = IntersightApiClient(host=base_url,private_key=key,api_key_id=key_id)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_service():
  """This is a function to test the availability of the Intersight API and
  Intersight account. The Intersight account tested for is the owner of the
  provided Intersight API key and key ID.
  """
  try:
    # Check that Intersight Account is accessible
    print("Testing access to the Intersight API by verifying the Intersight "
          "account information...")
    check_account = intersight.IamAccountApi(api_instance)
    get_account = check_account.iam_accounts_get()
    if check_account.api_client.last_response.status is not 200:
      print("The Intersight API and Account Availability Test did not pass.")
      print("The Intersight account information could not be verified.")
      print("Exiting due to the Intersight account being unavailable.\n")
      print("Please verify that the correct API Key ID has been provided then "
            "restart the HX Auto Deploy Tool.\n")
      print("If applicable, also verify that all Intersight services are up \n"
            "and operational at https://status.intersight.com.\n")
      sys.exit(0)
    else:
      account_name = get_account.results[0].name
      print("The Intersight API and Account Availability Test has passed.\n")
      print(f"The Intersight account named '{account_name}' has been found.\n")
      return account_name
  except Exception:
    print("Unable to access the Intersight API.")
    print("Exiting due to the Intersight API being unavailable.\n")
    print("Please verify that the correct API Key ID has been provided then "
          "restart the HX Auto Deploy Tool.\n")
    print("If applicable, also verify that all Intersight services are up \n"
          "and operational at https://status.intersight.com.\n")
    sys.exit(0)


# Establish Intersight Universal Functions
def iu_get(api_path):
    """This is a function to perform a universal or generic GET on objects
    under available Intersight API types, including those not yet defined in
    the Intersight SDK for Python. An argument for the API type path is
    required.

    Args:
        api_path: The path to the targeted Intersight API type. For example, to
        specify the Intersight API type for adapter configuration policies,
        enter "adapter/ConfigPolicies". More API types can be found in the
        Intersight API reference library at
        https://intersight.com/apidocs/introduction/overview/.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
    """
    full_resource_path = f"/{api_path}"
    try:
        api_instance.call_api(full_resource_path,"GET")
        response = api_instance.last_response.data
        results = json.loads(response)
        print(f"The API resource path '{api_path}' has been accessed "
              "successfully.")
        return results
    except Exception as exception_message:
        print(f"Unable to access the API resource path '{api_path}'.\n")
        print("Exception Message: ")
        traceback.print_exc()


# Establish function to retrieve Intersight API objects
def intersight_object_retriever(object_name, object_type, intersight_api_path, org="default"):
    """This is a function to retrieve named objects created under an Intersight
    account using the Intersight API.
    """
    print(f"Retrieving the provided {object_type} named '{object_name}' "
          "from Intersight...")

    try:
        get_intersight_objects = iu_get(intersight_api_path)
    except Exception as exception_message:
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Please review and resolve any error messages then restart "
              f"the {maker_type}.\n")
        print(exception_message)
        sys.exit(0)

    if get_intersight_objects["Results"]:
        for intersight_object in get_intersight_objects["Results"]:
            if intersight_object.get("Organization"):
                print("The provided object is part of an Intersight Account Organization.")
                provided_org_moid = intersight_object_retriever(org,
                                                                "Organization",
                                                                "organization/Organizations")
                if intersight_object.get("Organization", {}).get("Moid") == provided_org_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        print(f"The provided {object_type} named "
                              f"'{object_name}' with the "
                              f"MOID of {intersight_object_moid} has been "
                              "identified and retrieved.")
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    print(f"The provided {object_type} named "
                          f"'{object_name}' with the "
                          f"MOID of {intersight_object_moid} has been "
                          "identified and retrieved.")
                    return intersight_object_moid
        else:
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name} through the GUI and verify that the "
                  f"needed {object_type} is present.")
            print(f"Exiting the {maker_type}.\n")
            sys.exit(0)
    else:
        print(f"The provided {object_type} named '{object_name}' was not "
              f"found. No {object_type} is currently available in the Intersight "
              "account.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name} through the GUI and verify that the "
              f"needed {object_type} is present.")
        print(f"Exiting the {maker_type}.\n")
        sys.exit(0)


# Run the Intersight API and Account Availability Test
print("Running the Intersight API and Account Availability Test.")
intersight_api_test = test_intersight_service()
intersight_account_name = intersight_api_test

# Retrieve the Organization for the HyperFlex Cluster Profile and Policies
print("Retrieving the HyperFlex Cluster Profile Organization...")

hx_policy_org_moid = intersight_object_retriever(hx_organization,
                                                 "Organization",
                                                 "organization/Organizations")

# Establish the Tags for the HyperFlex Cluster Profile and Policies
print("Establishing the HyperFlex Cluster Profile Tags...\n")

hx_tags_dictionary_list = []
if hx_tags:
    for key in hx_tags:
        hx_tags_dictionary_list_entry = {"Key": key, "Value": hx_tags.get(key)}
        hx_tags_dictionary_list.append(hx_tags_dictionary_list_entry)

# Create the HyperFlex Local Credential Policy for the Cluster Configuration "Security" policy type settings
print("Configuring the HyperFlex Local Credential Policy named "
      f"{hx_policy_name_prefix}-local-credential-policy...")
hx_local_credential_policy_body = {
  "Name": f"{hx_policy_name_prefix}-local-credential-policy",
  "Description": "A HyperFlex Local Credential Policy generated by the HX Auto Deploy Tool.",
  "FactoryHypervisorPassword": default_factory_esxi_hypervisor_password_set,
  "HypervisorAdmin": esxi_hypervisor_admin_username,
  "HypervisorAdminPwd": esxi_hypervisor_admin_password,
  "HxdpRootPwd": storage_controller_vm_root_user_password,
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_local_credential_policy = intersight.HyperflexLocalCredentialPolicyApi(api_instance)
  post_hx_local_credential_policy = hx_local_credential_policy.hyperflex_local_credential_policies_post(hx_local_credential_policy_body)
  print("The HyperFlex Local Credential Policy has been configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the HyperFlex Local Credential Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex System Configuration Policy for the Cluster Configuration "DNS, NTP, and Timezone" policy type settings
print("Configuring the HyperFlex System Configuration Policy named "
      f"{hx_policy_name_prefix}-sys-config-policy...")
hx_system_configuration_policy_body = {
  "Name": f"{hx_policy_name_prefix}-sys-config-policy",
  "Description": "A HyperFlex System Configuration Policy generated by the HX Auto Deploy Tool.",
  "DnsDomainName": dns_suffix,
  "DnsServers": dns_servers_list,
  "NtpServers": ntp_servers_list,
  "Timezone": timezone,
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_system_configuration_policy = intersight.HyperflexSysConfigPolicyApi(api_instance)
  post_hx_system_configuration_policy = hx_system_configuration_policy.hyperflex_sys_config_policies_post(hx_system_configuration_policy_body)
  print("The HyperFlex System Configuration Policy has been configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the .")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex VMware vCenter Configuration Policy for the Cluster Configuration "vCenter (Optional)" policy type settings
print("Configuring the HyperFlex VMware vCenter Configuration Policy named "
      f"{hx_policy_name_prefix}-vcenter-config-policy...")
hx_vcenter_configuration_policy_body = {
  "Name": f"{hx_policy_name_prefix}-vcenter-config-policy",
  "Description": "A HyperFlex VMware vCenter Configuration Policy generated by the HX Auto Deploy Tool.",
  "DataCenter": vcenter_hosts_and_clusters_datacenter_name,
  "Hostname": vcenter_fqdn_or_ip,
  "Username": vcenter_admin_username,
  "Password": vcenter_admin_password,
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_vcenter_configuration_policy = intersight.HyperflexVcenterConfigPolicyApi(api_instance)
  post_hx_vcenter_configuration_policy = hx_vcenter_configuration_policy.hyperflex_vcenter_config_policies_post(hx_vcenter_configuration_policy_body)
  print("The HyperFlex VMware vCenter Configuration Policy has been "
        "configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the "
        "HyperFlex VMware vCenter Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex Cluster Storage Configuration Policy for the Cluster Configuration "Storage Configuration (Optional)" policy type settings
print("Configuring the HyperFlex Cluster Storage Configuration Policy named "
      f"{hx_policy_name_prefix}-cluster-storage-policy...") 
hx_cluster_storage_policy_body = {
  "Name": f"{hx_policy_name_prefix}-cluster-storage-policy",
  "Description": "A HyperFlex Cluster Storage Configuration Policy generated by the HX Auto Deploy Tool.",
  "DiskPartitionCleanup": cleanup_disk_partitions,
  "VdiOptimization": enable_vdi_optimization,
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_cluster_storage_policy = intersight.HyperflexClusterStoragePolicyApi(api_instance)
  post_hx_cluster_storage_policy = hx_cluster_storage_policy.hyperflex_cluster_storage_policies_post(hx_cluster_storage_policy_body)
  print("The HyperFlex Cluster Storage Configuration Policy has been configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the "
        "HyperFlex Cluster Storage Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex Node Configuration Policy for the Cluster Configuration "IP & Hostname" policy type settings
print("Configuring the HyperFlex Node Configuration Policy named "
      f"{hx_policy_name_prefix}-node-config-policy...")
hx_node_configuration_policy_body = {
  "Name": f"{hx_policy_name_prefix}-node-config-policy",
  "Description": "A HyperFlex Node Configuration Policy generated by the HX Auto Deploy Tool.",
  "NodeNamePrefix": esxi_hostname_prefix,
  "MgmtIpRange": {
    "EndAddr": esxi_mgmt_ip_range_end_address,
    "Gateway": esxi_mgmt_ip_range_gateway,
    "Netmask": esxi_mgmt_ip_range_subnet_mask,
    "ObjectType": "hyperflex.IpAddrRange",
    "StartAddr": esxi_mgmt_ip_range_start_address
    },
  "HxdpIpRange": {
    "EndAddr": storage_controller_vm_ip_range_end_address,
    "Gateway": storage_controller_vm_ip_range_gateway,
    "Netmask": storage_controller_vm_ip_range_subnet_mask,
    "ObjectType": "hyperflex.IpAddrRange",
    "StartAddr": storage_controller_vm_ip_range_start_address
    },
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_node_configuration_policy = intersight.HyperflexNodeConfigPolicyApi(api_instance)
  post_hx_node_configuration_policy = hx_node_configuration_policy.hyperflex_node_config_policies_post(hx_node_configuration_policy_body)
  print("The HyperFlex Node Configuration Policy has been configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the "
        "HyperFlex Node Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex Cluster Network Configuration Policy for the Cluster Configuration "Network Configuration" policy type settings
print("Configuring the HyperFlex Cluster Network Configuration Policy named "
      f"{hx_policy_name_prefix}-cluster-network-policy...")
hx_cluster_network_policy_body = {
  "Name": f"{hx_policy_name_prefix}-cluster-network-policy",
  "Description": "A HyperFlex Cluster Network Configuration Policy generated by the HX Auto Deploy Tool.",
  "MgmtVlan": {
    "VlanId": hx_mgmt_vlan_id
    },
  "UplinkSpeed": hx_node_uplink_speed,
  "JumboFrame": enable_hx_node_uplink_jumbo_frames,
  "MacPrefixRange": {
    "EndAddr": hx_mac_prefix_end_address_post_uplink_speed_checked,
    "StartAddr": hx_mac_prefix_start_address_post_uplink_speed_checked
    },
  "Organization": {"Moid": hx_policy_org_moid},
  "Tags": hx_tags_dictionary_list
  }

try:
  hx_cluster_network_policy = intersight.HyperflexClusterNetworkPolicyApi(api_instance)
  post_hx_cluster_network_policy = hx_cluster_network_policy.hyperflex_cluster_network_policies_post(hx_cluster_network_policy_body)
  print("The HyperFlex Cluster Network Configuration Policy has been "
        "configured.\n")
except Exception as exception_message:
  print("There was an issue configuring the "
        "HyperFlex Cluster Network Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

# Create the HyperFlex Software Version Policy
print("Attempting to create a new HyperFlex Software Version Policy for \n"
      f"HyperFlex {hx_software_version}...")
hx_software_version_policy_name = f"{hx_cluster_profile_name}-software-version-policy"
print("Checking for the presence of pre-existing HyperFlex Software Version "
      "Policies...")

try:
  hx_software_version_policy = intersight.HyperflexSoftwareVersionPolicyApi(api_instance)
  get_hx_software_version_policy = hx_software_version_policy.hyperflex_software_version_policies_get()
  get_hx_software_version_policy_dict = get_hx_software_version_policy.to_dict()
except Exception as exception_message:
  print("There was an issue checking for the presence of pre-existing "
        "HyperFlex Software Version Policies.")
  print("The Intersight SDK for Python package may need to be upgraded.")
  print('To upgrade, run the command '
        '"python -m pip install git+https://github.com/CiscoUcs/intersight-python.git --upgrade --user".')
  print("Please verify the latest version of the Intersight SDK for Python is "
        "installed, review and resolve any error messages, then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_software_version_policy_dict["results"] is not None:
  for policy in get_hx_software_version_policy_dict["results"]:
    if policy["name"] == hx_software_version_policy_name:
      print("A HyperFlex Software Version Policy named "
            f"{hx_software_version_policy_name} already exists.")
      found_hx_software_version_policy = policy
      if found_hx_software_version_policy["hxdp_version"] == hx_software_version:
        print("The existing HyperFlex Software Version Policy is configured "
              "with the \nrequested software version, HyperFlex "
              f"{hx_software_version}.\n")
      else:
        print("The required HyperFlex Software Version Policy cannot be "
              "created due to a pre-existing policy that does not meet the "
              "requested HyperFlex software version.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name} through the GUI.")
        print("Verify that no pre-existing HyperFlex clusters with the name "
              f"{hx_cluster_profile_name} are present.")
        print("Exiting the HX Auto Deploy Tool.\n")
        sys.exit(0)
      break
  else:
    print("Creating a new HyperFlex Software Version Policy named "
          f"{hx_software_version_policy_name}...")
    hx_software_version_policy1_body = {
      "Name": hx_software_version_policy_name,
      "HxdpVersion": hx_software_version,
      "Organization": {"Moid": hx_policy_org_moid},
      }
    
    try:
      post_hx_software_version_policy1 = hx_software_version_policy.hyperflex_software_version_policies_post(hx_software_version_policy1_body)
      print("The new HyperFlex Software Version Policy has been created.\n")
    except Exception as exception_message:
      print("There was an issue creating the "
            "HyperFlex Software Version Policy.")
      print("Please review and resolve any error messages then restart "
            "the HX Auto Deploy Tool.\n")
      print(exception_message)
      sys.exit(0)
      
else:
  print("Creating a new HyperFlex Software Version Policy named "
        f"{hx_software_version_policy_name}...")
  hx_software_version_policy1_body = {
    "Name": hx_software_version_policy_name,
    "HxdpVersion": hx_software_version,
    "Organization": {"Moid": hx_policy_org_moid},
    }
  
  try:
    post_hx_software_version_policy1 = hx_software_version_policy.hyperflex_software_version_policies_post(hx_software_version_policy1_body)
    print("The new HyperFlex Software Version Policy has been created.\n")
  except Exception as exception_message:
    print("There was an issue creating the "
          "HyperFlex Software Version Policy.")
    print("Please review and resolve any error messages then restart "
          "the HX Auto Deploy Tool.\n")
    print(exception_message)
    sys.exit(0)

# Retrieve the HyperFlex Software Version Policy
print("Retrieving the HyperFlex Software Version Policy...")

try:
  get_hx_software_version_policy = hx_software_version_policy.hyperflex_software_version_policies_get()
  get_hx_software_version_policy_dict = get_hx_software_version_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex Software Version Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)
  
if get_hx_software_version_policy_dict["results"] is not None:
  for policy in get_hx_software_version_policy_dict["results"]:
    if policy["name"] == hx_software_version_policy_name:
      hx_software_version_policy_moid = policy["moid"]
      print("The required HyperFlex Software Version Policy named "
            f"{hx_software_version_policy_name} with the MOID of "
            f"{hx_software_version_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Software Version Policy named "
        f"{hx_software_version_policy_name} was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve available rack servers
print("Retrieving the available rack unit servers...")

try:
  cmp_rack_unit = intersight.ComputeRackUnitApi(api_instance)
  get_cmp_rack_unit = cmp_rack_unit.compute_rack_units_get()
  get_cmp_rack_unit_dict = get_cmp_rack_unit.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "available rack unit servers.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

cmp_rack_unit_list = []

if get_cmp_rack_unit_dict["results"] is not None:
  for rack_unit in get_cmp_rack_unit_dict["results"]:
    if any(attribute in hx_node_attribute_list for attribute in (rack_unit["kvm_ip_addresses"][0]["address"], rack_unit["serial"])):
      rack_unit_dict = {
        "MOID": rack_unit["moid"],
        "IP Address": rack_unit["kvm_ip_addresses"][0]["address"],
        "Serial": rack_unit["serial"]
        }
      cmp_rack_unit_list.append(rack_unit_dict)
else:
  print("There were no available rack servers found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI \nand verify that the required rack servers are "
        "present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Find pre-defined HX server nodes among retrieved rack servers
cmp_rack_unit_attribute_list = []
for selected_rack_unit in cmp_rack_unit_list:
  cmp_rack_unit_attribute_list.append(selected_rack_unit["IP Address"])
  cmp_rack_unit_attribute_list.append(selected_rack_unit["Serial"])
hx_node_attribute_moid_dictionary = {}

if not cmp_rack_unit_list:
  print("No pre-defined HyperFlex server nodes were found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI \nand verify that the required rack servers are "
        "present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)
else:
  for hx_node in cmp_rack_unit_list:
    for hx_node_attribute in hx_node_attribute_list:
      if hx_node_attribute in (hx_node["IP Address"], hx_node["Serial"]):
        hx_node_attribute_moid_dictionary[hx_node_attribute] = hx_node["MOID"]
        print("The HyperFlex server node with the pre-defined attribute "
              f"{hx_node_attribute} has been found.")
        print(f'The server has an IP address of {hx_node["IP Address"]}, '
              f'the serial number {hx_node["Serial"]}, '
              f'and the MOID of {hx_node["MOID"]}.\n')

for hx_node_attribute in hx_node_attribute_list:
  if hx_node_attribute not in cmp_rack_unit_attribute_list:
    print("The required rack server with the assigned attribute "
          f"{hx_node_attribute} \nwas not found.")
    print("Please check the Intersight Account named "
          f"{intersight_account_name} through the GUI \nand verify that the "
          "required rack servers are present.")
    print("Exiting the HX Auto Deploy Tool.\n")
    sys.exit(0)
      
# Retrieve the HyperFlex Local Credential Policy for the Cluster Configuration "Security" policy type settings
print("Retrieving the HyperFlex Local Credential Policy...")

try:
  hx_local_credential_policy = intersight.HyperflexLocalCredentialPolicyApi(api_instance)
  get_hx_local_credential_policy = hx_local_credential_policy.hyperflex_local_credential_policies_get()
  get_hx_local_credential_policy_dict = get_hx_local_credential_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex Local Credential Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_local_credential_policy_dict["results"] is not None:
  for policy in get_hx_local_credential_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-local-credential-policy":
      hx_local_credential_policy_moid = policy["moid"]
      print("The required HyperFlex Local Credential Policy named "
            f"{hx_policy_name_prefix}-local-credential-policy with the MOID of "
            f"{hx_local_credential_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Local Credential Policy named "
        f"{hx_policy_name_prefix}-local-credential-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve the HyperFlex System Configuration Policy for the Cluster Configuration "DNS, NTP, and Timezone" policy type settings
print("Retrieving the HyperFlex System Configuration Policy...")

try:
  hx_sys_config_policy = intersight.HyperflexSysConfigPolicyApi(api_instance)
  get_hx_sys_config_policy = hx_sys_config_policy.hyperflex_sys_config_policies_get()
  get_hx_sys_config_policy_dict = get_hx_sys_config_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex System Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_sys_config_policy_dict["results"] is not None:
  for policy in get_hx_sys_config_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-sys-config-policy":
      hx_sys_config_policy_moid = policy["moid"]
      print("The required HyperFlex System Configuration Policy named "
            f"{hx_policy_name_prefix}-sys-config-policy with the MOID of "
            f"{hx_sys_config_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex System Configuration Policy named "
        f"{hx_policy_name_prefix}-sys-config-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve the HyperFlex VMware vCenter Configuration Policy for the Cluster Configuration "vCenter (Optional)" policy type settings
print("Retrieving the HyperFlex VMware vCenter Configuration Policy...")

try:
  hx_vcenter_config_policy = intersight.HyperflexVcenterConfigPolicyApi(api_instance)
  get_hx_vcenter_config_policy = hx_vcenter_config_policy.hyperflex_vcenter_config_policies_get()
  get_hx_vcenter_config_policy_dict = get_hx_vcenter_config_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex VMware vCenter Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_vcenter_config_policy_dict["results"] is not None:
  for policy in get_hx_vcenter_config_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-vcenter-config-policy":
      hx_vcenter_config_policy_moid = policy["moid"]
      print("The required HyperFlex VMware vCenter Configuration Policy named "
            f"{hx_policy_name_prefix}-vcenter-config-policy with the MOID of "
            f"{hx_vcenter_config_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex VMware vCenter Configuration Policy named "
        f"{hx_policy_name_prefix}-vcenter-config-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve the HyperFlex Cluster Storage Configuration Policy for the Cluster Configuration "Storage Configuration (Optional)" policy type settings
print("Retrieving the HyperFlex Cluster Storage Configuration Policy...")

try:
  hx_cluster_storage_policy = intersight.HyperflexClusterStoragePolicyApi(api_instance)
  get_hx_cluster_storage_policy = hx_cluster_storage_policy.hyperflex_cluster_storage_policies_get()
  get_hx_cluster_storage_policy_dict = get_hx_cluster_storage_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex Cluster Storage Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_cluster_storage_policy_dict["results"] is not None:
  for policy in get_hx_cluster_storage_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-cluster-storage-policy":
      hx_cluster_storage_policy_moid = policy["moid"]
      print("The required HyperFlex Cluster Storage Configuration Policy "
            f"named {hx_policy_name_prefix}-cluster-storage-policy with the "
            f"MOID of {hx_cluster_storage_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Cluster Storage Configuration Policy named "
        f"{hx_policy_name_prefix}-cluster-storage-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve the HyperFlex Node Configuration Policy for the Cluster Configuration "IP & Hostname" policy type settings
print("Retrieving the HyperFlex Node Configuration Policy...")

try:
  hx_node_config_policy = intersight.HyperflexNodeConfigPolicyApi(api_instance)
  get_hx_node_config_policy = hx_node_config_policy.hyperflex_node_config_policies_get()
  get_hx_node_config_policy_dict = get_hx_node_config_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex Node Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_node_config_policy_dict["results"] is not None:
  for policy in get_hx_node_config_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-node-config-policy":
      hx_node_config_policy_moid = policy["moid"]
      print("The required HyperFlex Node Configuration Policy named "
            f"{hx_policy_name_prefix}-node-config-policy with the MOID of "
            f"{hx_node_config_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Node Configuration Policy named "
        f"{hx_policy_name_prefix}-node-config-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Retrieve the HyperFlex Cluster Network Configuration Policy for the Cluster Configuration "Network Configuration" policy type settings
print("Retrieving the HyperFlex Cluster Network Configuration Policy...")

try:
  hx_cluster_network_policy = intersight.HyperflexClusterNetworkPolicyApi(api_instance)
  get_hx_cluster_network_policy = hx_cluster_network_policy.hyperflex_cluster_network_policies_get()
  get_hx_cluster_network_policy_dict = get_hx_cluster_network_policy.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the "
        "HyperFlex Cluster Network Configuration Policy.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_cluster_network_policy_dict["results"] is not None:
  for policy in get_hx_cluster_network_policy_dict["results"]:
    if policy["name"] == f"{hx_policy_name_prefix}-cluster-network-policy":
      hx_cluster_network_policy_moid = policy["moid"]
      print("The required HyperFlex Cluster Network Configuration Policy named "
            f"{hx_policy_name_prefix}-cluster-network-policy with the MOID of "
            f"{hx_cluster_network_policy_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Cluster Network Configuration Policy named "
        f"{hx_policy_name_prefix}-cluster-network-policy was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Create the HyperFlex Cluster Profile
print("Attempting to create a new HyperFlex Cluster Profile...")
print("Checking for the presence of pre-existing HyperFlex Cluster Profiles...")

try:
  hx_cluster_profile = intersight.HyperflexClusterProfileApi(api_instance)
  get_hx_cluster_profile = hx_cluster_profile.hyperflex_cluster_profiles_get()
  get_hx_cluster_profile_dict = get_hx_cluster_profile.to_dict()
except Exception as exception_message:
  print("There was an issue checking for the presence of pre-existing "
        "HyperFlex Cluster Profiles.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_cluster_profile_dict["results"] is not None:
  for profile in get_hx_cluster_profile_dict["results"]:
    if profile["name"] == hx_cluster_profile_name:
      print(f"A HyperFlex Cluster Profile named {hx_cluster_profile_name} "
            "already exists.")
      print("The new HyperFlex Cluster Profile cannot be created due to the "
            "pre-existing profile.")
      print("Please check the Intersight Account named "
            f"{intersight_account_name} through the GUI.")
      print("Verify that no pre-existing HyperFlex clusters with the name "
            f"{hx_cluster_profile_name} are present.")
      print("Exiting the HX Auto Deploy Tool.\n")
      sys.exit(0)
      break
  else:
    print("Creating a new HyperFlex Cluster Profile named "
          f"{hx_cluster_profile_name}.\n")
    hx_cluster_profile1_body = {
      "Name": hx_cluster_profile_name,
      "MgmtPlatform": hx_mgmt_platform_type,
      "SoftwareVersion": {"Moid": hx_software_version_policy_moid},
      "LocalCredential": {"Moid": hx_local_credential_policy_moid },
      "SysConfig": {"Moid": hx_sys_config_policy_moid},
      "VcenterConfig": {"Moid": hx_vcenter_config_policy_moid},
      "ClusterStorage": {"Moid": hx_cluster_storage_policy_moid},
      "NodeConfig": {"Moid": hx_node_config_policy_moid},
      "ClusterNetwork": {"Moid": hx_cluster_network_policy_moid},    
      "StorageDataVlan":{"VlanId": hx_storage_vlan_id},
      "MgmtIpAddress": hx_connect_mgmt_ip_address,
      "MacAddressPrefix": hx_mac_prefix_address_post_uplink_speed_checked,
      "Description": hx_cluster_profile_description,
      "Organization": {"Moid": hx_policy_org_moid},
      "Tags": hx_tags_dictionary_list
      }

    try:
      post_hx_cluster_profile1 = hx_cluster_profile.hyperflex_cluster_profiles_post(hx_cluster_profile1_body)
      print("The new HyperFlex Cluster Profile has been created.\n")
    except Exception as exception_message:
      print("There was an issue creating the HyperFlex Cluster Profile.")
      print("Please review and resolve any error messages then restart "
            "the HX Auto Deploy Tool.\n")
      print(exception_message)
      sys.exit(0)      
else:
  print("Creating a new HyperFlex Cluster Profile named "
        f"{hx_cluster_profile_name}.\n")
  hx_cluster_profile1_body = {
    "Name": hx_cluster_profile_name,
    "MgmtPlatform": hx_mgmt_platform_type,
    "SoftwareVersion": {"Moid": hx_software_version_policy_moid},
    "LocalCredential": {"Moid": hx_local_credential_policy_moid },
    "SysConfig": {"Moid": hx_sys_config_policy_moid},
    "VcenterConfig": {"Moid": hx_vcenter_config_policy_moid},
    "ClusterStorage": {"Moid": hx_cluster_storage_policy_moid},
    "NodeConfig": {"Moid": hx_node_config_policy_moid},
    "ClusterNetwork": {"Moid": hx_cluster_network_policy_moid},    
    "StorageDataVlan":{"VlanId": hx_storage_vlan_id},
    "MgmtIpAddress": hx_connect_mgmt_ip_address,
    "MacAddressPrefix": hx_mac_prefix_address_post_uplink_speed_checked,
    "Description": hx_cluster_profile_description,
    "Organization": {"Moid": hx_policy_org_moid},
    "Tags": hx_tags_dictionary_list
    }

  try:
    post_hx_cluster_profile1 = hx_cluster_profile.hyperflex_cluster_profiles_post(hx_cluster_profile1_body)
    print("The new HyperFlex Cluster Profile has been created.\n")
  except Exception as exception_message:
    print("There was an issue creating the HyperFlex Cluster Profile.")
    print("Please review and resolve any error messages then restart "
          "the HX Auto Deploy Tool.\n")
    print(exception_message)
    sys.exit(0)

# Retrieve the HyperFlex Cluster Profile
print("Retrieving the HyperFlex Cluster Profile...")

try:
  get_hx_cluster_profile = hx_cluster_profile.hyperflex_cluster_profiles_get()
  get_hx_cluster_profile_dict = get_hx_cluster_profile.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the HyperFlex Cluster Profile.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_cluster_profile_dict["results"] is not None:
  for profile in get_hx_cluster_profile_dict["results"]:
    if profile["name"] == hx_cluster_profile_name:
      hx_cluster_profile_moid = profile["moid"]
      print("The required HyperFlex Cluster Profile named "
            f"{hx_cluster_profile_name} with the MOID of "
            f"{hx_cluster_profile_moid} has been identified "
            "and retrieved.\n")
else:
  print("The required HyperFlex Cluster Profile named "
        f"{hx_cluster_profile_name} was not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Create the HyperFlex Node Profiles
print("Attempting to create new HyperFlex Node Profiles...")

try:
  hx_node_profile = intersight.HyperflexNodeProfileApi(api_instance)
except Exception as exception_message:
  print("There was an issue creating the HyperFlex Node Profiles.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

hx_node_attribute_node_profile_body_dictionary = {}

for index, (hx_node_attribute, esxi_mgmt_ip, storage_controller_vm_ip) in enumerate(zip(hx_node_attribute_list, esxi_mgmt_ip_range_list, storage_controller_vm_ip_range_list), start=1):
  hx_node_attribute_node_profile_body_dictionary.update(
    {hx_node_attribute : {
      "Name": f"{esxi_hostname_prefix}-{index}",
      "HxdpMgmtIp": storage_controller_vm_ip,
      "HypervisorMgmtIp": esxi_mgmt_ip,
      "AssignedServer": {"Moid": hx_node_attribute_moid_dictionary[hx_node_attribute], "ObjectType": "compute.RackUnit"},
      "ClusterProfile": {"Moid": hx_cluster_profile_moid}
      }
     }
    )

  try:
    post_hx_node_profile1 = hx_node_profile.hyperflex_node_profiles_post(hx_node_attribute_node_profile_body_dictionary[hx_node_attribute])
    print("A new HyperFlex Node Profile has been created for the node with the "
          f"provided attribute of {hx_node_attribute}.\n")
  except Exception as exception_message:
    print("There was an issue creating a new HyperFlex Node Profile for the "
          f"node with the provided attribute of {hx_node_attribute}.")
    print("Please review and resolve any error messages then restart "
          "the HX Auto Deploy Tool.\n")
    print(exception_message)
    sys.exit(0)

# Retrieve the HyperFlex Node Profiles
print("Retrieving the HyperFlex Node Profiles...")

try:
  get_hx_node_profile = hx_node_profile.hyperflex_node_profiles_get()
  get_hx_node_profile_dict = get_hx_node_profile.to_dict()
except Exception as exception_message:
  print("There was an issue retrieving the HyperFlex Node Profiles.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

if get_hx_node_profile_dict["results"] is not None:
  for profile in get_hx_node_profile_dict["results"]:
    if profile["cluster_profile"]["moid"] == hx_cluster_profile_moid:
      print(f'The required HyperFlex Node Profile named {profile["name"]} with '
            f'the MOID of {profile["moid"]} has been identified.\n')
else:
  print("Required HyperFlex Node Profiles were not found.")
  print(f"Please check the Intersight Account named {intersight_account_name} "
        "through the GUI and verify that the needed resources are present.")
  print("Exiting the HX Auto Deploy Tool.\n")
  sys.exit(0)

# Deploy the HyperFlex Cluster Profile
print("Attempting to deploy the new HyperFlex Cluster Profile...")
hx_cluster_profile1_body_update1 = {
  "Action": "Deploy"
  }

try:
  patch_hx_cluster_profile1 = hx_cluster_profile.hyperflex_cluster_profiles_moid_patch(hx_cluster_profile_moid,hx_cluster_profile1_body_update1)
  print(f"The new HyperFlex Cluster Profile named {hx_cluster_profile_name} \n"
        "has been deployed!\n")
  print("The HyperFlex Notification Tool available at \n"
        "https://github.com/ugo-emekauwa/hyperflex-notification-tool \ncan be "
        "used to receive email alerts on the progress.\n")
except Exception as exception_message:
  print("There was an issue deploying the new HyperFlex Cluster Profile "
        f"named {hx_cluster_profile_name}.")
  print("Please review and resolve any error messages then restart "
        "the HX Auto Deploy Tool.\n")
  print(exception_message)
  sys.exit(0)

sys.exit(0)
